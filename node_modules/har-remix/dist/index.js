"use strict";
var http = require("http");
var zlib = require("zlib");
var fs = require("fs");
var ArchiveServer = (function () {
    function ArchiveServer(delegate) {
        this.delegate = delegate;
        this.responses = createMap();
    }
    ArchiveServer.prototype.loadArchive = function (path) {
        this.addArchive(JSON.parse(fs.readFileSync(path, 'utf8')));
    };
    ArchiveServer.prototype.addArchive = function (har) {
        this.addArchiveEntries(har.log.entries);
    };
    ArchiveServer.prototype.addArchiveEntries = function (entries) {
        for (var i = 0; i < entries.length; i++) {
            this.addArchiveEntry(entries[i]);
        }
    };
    ArchiveServer.prototype.addArchiveEntry = function (entry) {
        var key = this.delegate.keyForArchiveEntry(entry);
        if (!key)
            return;
        var statusCode = entry.response.status;
        var response;
        if (statusCode >= 200 && statusCode < 300) {
            var content = entry.response.content;
            var text = content.text, encoding = content.encoding;
            var body = void 0;
            if (encoding === 'base64') {
                body = new Buffer(text, 'base64');
            }
            else {
                if (this.delegate.textFor) {
                    text = this.delegate.textFor(entry, key, text);
                }
                body = new Buffer(text);
            }
            var headers = void 0;
            if (content.compression && content.compression > 0) {
                body = zlib.gzipSync(body, {
                    level: 9
                });
                headers = {
                    'Content-Encoding': 'gzip',
                    'Content-Length': '' + body.byteLength,
                    'Content-Type': content.mimeType
                };
            }
            else {
                headers = {
                    'Content-Length': '' + body.byteLength,
                    'Content-Type': content.mimeType
                };
            }
            response = {
                statusCode: statusCode, headers: headers, body: body, next: undefined
            };
        }
        else {
            if (this.delegate.responseFor) {
                response = this.delegate.responseFor(entry, key);
            }
        }
        if (response) {
            if (this.delegate.finalizeResponse) {
                response = this.delegate.finalizeResponse(entry, key, response);
            }
            this.addResponse(key, response);
        }
    };
    ArchiveServer.prototype.addResponse = function (key, response) {
        console.log("add:  " + key);
        var res = this.responses[key];
        if (res) {
            while (res.next) {
                res = res.next;
            }
            res.next = response;
        }
        else {
            this.responses[key] = response;
        }
    };
    ArchiveServer.prototype.responseFor = function (key) {
        var res = this.responses[key];
        if (res && res.next) {
            this.responses[key] = res.next;
        }
        return res;
    };
    ArchiveServer.prototype.handle = function (request, response) {
        var key = this.delegate.keyForServerRequest(request);
        if (key) {
            var res = this.responseFor(key);
            if (res) {
                console.log("hit:  " + key);
                response.writeHead(res.statusCode, res.headers);
                response.end(res.body);
            }
            else {
                console.log("miss: " + key);
            }
        }
        if (this.delegate.missingResponse && !response.headersSent) {
            this.delegate.missingResponse(request, response);
        }
        if (!response.headersSent) {
            response.writeHead(404);
            response.end();
        }
        console.log(response.statusCode, request.method, request.url);
    };
    ArchiveServer.prototype.createServer = function () {
        var _this = this;
        return http.createServer(function (req, res) { return _this.handle(req, res); });
    };
    return ArchiveServer;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ArchiveServer;
function createMap() {
    var map = Object.create(null);
    map["__"] = undefined;
    delete map["__"];
    return map;
}
